datasource db {
  provider     = "mysql"
  relationMode = "prisma"
  url          = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([sessionToken])
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  userName      String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  snippets      Snippet[]
  bookmarks     Bookmark[]

  @@index([userName])
}

model Snippet {
  id        String     @id @default(cuid())
  title     String
  codeText  String     @db.LongText
  codeHTML  String     @db.LongText
  isPrivate Boolean    @default(false)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  userId    String
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookmarks Bookmark[]

  @@index([userId])
  @@index([isPrivate])
}

model Bookmark {
  id        String  @id @default(cuid())
  userId    String
  snippetId String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  snippet   Snippet @relation(fields: [snippetId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([snippetId])
  @@index([userId, snippetId])
}
